// Package containing all Abstract Syntax Tree node structs
package ast

import (
	"fmt"
	"math/rand"
	"strings"
)

const colorGreen = "\033[0;32m"
const colorPurple = "\033[0;35m"
const colorCyan = "\033[0;36m"
const colorNone = "\033[0m"

// Calling this an ast may be a stretch...

// Generic Node interfave
type Node interface {
	ToString() string
	Instruction() string
	Reconstruct() []string
}

// An InstructionNode is everything that does not define a stage
type InstructionNode interface {
	Node
	InstructionNode()
}

// Satisfy interface
func (*AddInstructionNode) InstructionNode()         {}
func (*ArgInstructionNode) InstructionNode()         {}
func (*CmdInstructionNode) InstructionNode()         {}
func (*CopyInstructionNode) InstructionNode()        {}
func (*EntrypointInstructionNode) InstructionNode()  {}
func (*EnvInstructionNode) InstructionNode()         {}
func (*ExposeInstructionNode) InstructionNode()      {}
func (*HealthcheckInstructionNode) InstructionNode() {}
func (*LabelInstructionNode) InstructionNode()       {}
func (*MaintainerInstructionNode) InstructionNode()  {}
func (*OnbuildInstructionNode) InstructionNode()     {}
func (*RunInstructionNode) InstructionNode()         {}
func (*ShellInstructionNode) InstructionNode()       {}
func (*StopsignalInstructionNode) InstructionNode()  {}
func (*UserInstructionNode) InstructionNode()        {}
func (*VolumeInstructionNode) InstructionNode()      {}
func (*WorkdirInstructionNode) InstructionNode()     {}
func (*CommentInstructionNode) InstructionNode()     {}
func (*EmptyLineNode) InstructionNode()              {}

// For the edge case that instruction supplied to ONBUILD cannot be parsed
func (*UnknownInstructionNode) InstructionNode() {}

// Stagenode defines the current stage for the instructions
type StageNode struct {
	Node
	Identifier      string
	Subsequent      *StageNode
	ReferencedByIds []string
	// This could be a tree in of itself...but docker Instructions dont really have a lot of logic so that may be overkill
	Instructions   []InstructionNode
	Image          string
	ParserMetadata map[string]string
	Name           string
}

var letters = []rune("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789")

func GenerateStageNodeID() string {
	b := make([]rune, 64)
	for i := range b {
		b[i] = letters[rand.Intn(len(letters))]
	}
	return string(b)
}

func (sn *StageNode) ToString() string {
	if sn.Name != "" {
		return fmt.Sprintf("%sStage%s: %s - %s (%s)", colorGreen, colorNone, sn.Identifier, sn.Name, sn.Image)
	}
	return fmt.Sprintf("%sStage%s: %s (%s)", colorGreen, colorNone, sn.Identifier, sn.Image)
}

func (sn *StageNode) Instruction() string { return "FROM" }

// Generated by chatgpt because i ain't writing all that

// ADD
type AddInstructionNode struct {
	Source      []string
	Destination string
	KeepGitDir  bool
	CheckSum    string
	Chown       string
	Chmod       string
	Link        bool
	Exclude     string
}

func (ai *AddInstructionNode) ToString() string {
	return fmt.Sprintf("%sADD%s %+q -> %s %s", colorPurple, colorCyan, ai.Source, ai.Destination, colorNone)
}

func (ai *AddInstructionNode) Instruction() string { return "ADD" }

// ARG
type ArgInstructionNode struct {
	Name  string
	Value string // optional default
}

func (ai *ArgInstructionNode) ToString() string {
	return fmt.Sprintf("%sARG%s %s %s %s", colorPurple, colorCyan, ai.Name, ai.Value, colorNone)
}

func (ai *ArgInstructionNode) Instruction() string { return "ARG" }

// CMD
type CmdInstructionNode struct {
	Cmd []string
}

func (ci *CmdInstructionNode) ToString() string {
	return fmt.Sprintf("%sCMD%s %+q %s", colorPurple, colorCyan, ci.Cmd, colorNone)
}

func (ci *CmdInstructionNode) Instruction() string { return "CMD" }

// COPY
type CopyInstructionNode struct {
	Source      []string
	Destination string
	Chown       string
	From        string
	KeepGitDir  bool
	Link        bool
}

func (ci *CopyInstructionNode) ToString() string {
	return fmt.Sprintf("%sCOPY%s %+q -> %s %s", colorPurple, colorCyan, ci.Source, ci.Destination, colorNone)
}

func (ci *CopyInstructionNode) Instruction() string { return "COPY" }

// ENTRYPOINT
type EntrypointInstructionNode struct {
	Exec []string
}

func (ei *EntrypointInstructionNode) ToString() string {
	return fmt.Sprintf("%sENTRYPOINT%s %+q %s", colorPurple, colorCyan, ei.Exec, colorNone)
}

func (ei *EntrypointInstructionNode) Instruction() string { return "ENTRYPOINT" }

// ENV
type EnvInstructionNode struct {
	Pairs map[string]string
}

func (ei *EnvInstructionNode) ToString() string {
	mapStrings := []string{}
	for k, v := range ei.Pairs {
		mapStrings = append(mapStrings, fmt.Sprintf("%s=%s", k, v))
	}
	return fmt.Sprintf("%sENV%s %s %s", colorPurple, colorCyan, strings.Join(mapStrings, ","), colorNone)
}

func (ei *EnvInstructionNode) Instruction() string { return "ENV" }

type PortInfo struct {
	Port  string
	IsTCP bool // can only be tcp or udp
}

func (pi *PortInfo) ToString() string {
	return fmt.Sprintf("Port %s (tcp: %v)", pi.Port, pi.IsTCP)
}

// EXPOSE
type ExposeInstructionNode struct {
	Ports []PortInfo
}

func (ei *ExposeInstructionNode) ToString() string {
	portString := ""
	for _, p := range ei.Ports {
		portString += fmt.Sprintf(" %s", p.ToString())
	}
	return fmt.Sprintf("%sEXPOSE%s Ports: [%s]  %s", colorPurple, colorCyan, portString, colorNone)
}

func (ei *ExposeInstructionNode) Instruction() string { return "EXPOSE" }

// HEALTHCHECK
type HealthcheckInstructionNode struct {
	Interval        string
	Timeout         string
	StartPeriod     string
	StartInterval   string
	Retries         int
	Cmd             []string // CMD or NONE
	CancelStatement bool     // setting it to None overwrites previous
}

func (hi *HealthcheckInstructionNode) ToString() string {
	if hi.CancelStatement {
		return fmt.Sprintf("%sHEALTHCHECK%s OVERWRITTEN WITH NONE %s", colorPurple, colorCyan, colorNone)
	}
	return fmt.Sprintf("%sHEALTHCHECK%s %+q %s", colorPurple, colorCyan, hi.Cmd, colorNone)
}

func (hi *HealthcheckInstructionNode) Instruction() string { return "HEALTHCHECK" }

// LABEL
type LabelInstructionNode struct {
	Pairs map[string]string
}

func (li *LabelInstructionNode) ToString() string {
	mapStrings := []string{}
	for k, v := range li.Pairs {
		mapStrings = append(mapStrings, fmt.Sprintf("%s=%s", k, v))
	}
	return fmt.Sprintf("%sLABEL%s %s %s", colorPurple, colorCyan, strings.Join(mapStrings, ","), colorNone)
}

func (li *LabelInstructionNode) Instruction() string { return "LABEL" }

// MAINTAINER (deprecated)
type MaintainerInstructionNode struct {
	Name string
}

func (mi *MaintainerInstructionNode) ToString() string {
	return fmt.Sprintf("%sMAINTAINER%s %s %s", colorPurple, colorCyan, mi.Name, colorNone)
}

func (mi *MaintainerInstructionNode) Instruction() string { return "MAINTAINER" }

// ONBUILD
type OnbuildInstructionNode struct {
	Trigger InstructionNode
}

func (oi *OnbuildInstructionNode) ToString() string {
	return fmt.Sprintf("%sONBUILD%s [%s] %s", colorPurple, colorCyan, oi.Trigger.ToString(), colorNone)
}

func (oi *OnbuildInstructionNode) Instruction() string { return "ONBUILD" }

// RUN
type RunInstructionNode struct {
	Cmd       []string
	ShellForm bool // true if shell form, false if exec form
	IsHeredoc bool // true if heredoc
	Device    string
	Mount     []string
	Network   string
	Security  string
}

func (ri *RunInstructionNode) ToString() string {
	return fmt.Sprintf("%sRUN%s %+q %s", colorPurple, colorCyan, ri.Cmd, colorNone)
}

func (ri *RunInstructionNode) Instruction() string { return "RUN" }

// SHELL
type ShellInstructionNode struct {
	Shell []string
}

func (si *ShellInstructionNode) ToString() string {
	return fmt.Sprintf("%sSHELL%s %+q %s", colorPurple, colorCyan, si.Shell, colorNone)
}

func (si *ShellInstructionNode) Instruction() string { return "SHELL" }

// STOPSIGNAL
type StopsignalInstructionNode struct {
	Signal string
}

func (si *StopsignalInstructionNode) ToString() string {
	return fmt.Sprintf("%sSTOP%s %s %s", colorPurple, colorCyan, si.Signal, colorNone)
}

func (si *StopsignalInstructionNode) Instruction() string { return "STOPSIGNAL" }

// USER
type UserInstructionNode struct {
	User string
}

func (ui *UserInstructionNode) ToString() string {
	return fmt.Sprintf("%sUSER%s %s %s", colorPurple, colorCyan, ui.User, colorNone)
}

func (ui *UserInstructionNode) Instruction() string { return "USER" }

// VOLUME
type VolumeInstructionNode struct {
	Mounts []string
}

func (vi *VolumeInstructionNode) ToString() string {
	return fmt.Sprintf("%sVOLUME%s %+q %s", colorPurple, colorCyan, vi.Mounts, colorNone)
}

func (vi *VolumeInstructionNode) Instruction() string { return "VOLUME" }

// WORKDIR
type WorkdirInstructionNode struct {
	Path string
}

func (wi *WorkdirInstructionNode) ToString() string {
	return fmt.Sprintf("%sWORKDIR%s %s %s", colorPurple, colorCyan, wi.Path, colorNone)
}

func (wi *WorkdirInstructionNode) Instruction() string { return "WORKDIR" }

// Unparseable instruction node
// Relevant if the instruction passed to ONBUILD could not be parsed
type UnknownInstructionNode struct {
	Text string
}

func (ui *UnknownInstructionNode) ToString() string {
	return fmt.Sprintf("%s!UNPARSEABLE!%s %s %s", colorPurple, colorCyan, ui.Text, colorNone)
}

func (ui *UnknownInstructionNode) Instruction() string { return "UNKNOWN" }

type CommentInstructionNode struct {
	Text string
}

func (ci *CommentInstructionNode) ToString() string {
	return fmt.Sprintf("%sCOMMENT%s %s %s", colorPurple, colorCyan, ci.Text, colorNone)
}

func (ei *CommentInstructionNode) Instruction() string { return "COMMENT" }

type EmptyLineNode struct{}

func (*EmptyLineNode) ToString() string    { return fmt.Sprintf("%sEMPTY%s", colorPurple, colorNone) }
func (*EmptyLineNode) Instruction() string { return "EMPTY LINE" }
