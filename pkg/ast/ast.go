package ast

// Calling this an ast may be a stretch...

type Node interface{}

type InstructionNode interface {
	Node
	InstructionNode()
}

// Satisfy interface
func (*AddInstructionNode) InstructionNode()         {}
func (*ArgInstructionNode) InstructionNode()         {}
func (*CmdInstructionNode) InstructionNode()         {}
func (*CopyInstructionNode) InstructionNode()        {}
func (*EntrypointInstructionNode) InstructionNode()  {}
func (*EnvInstructionNode) InstructionNode()         {}
func (*ExposeInstructionNode) InstructionNode()      {}
func (*FromInstructionNode) InstructionNode()        {}
func (*HealthcheckInstructionNode) InstructionNode() {}
func (*LabelInstructionNode) InstructionNode()       {}
func (*MaintainerInstructionNode) InstructionNode()  {}
func (*OnbuildInstructionNode) InstructionNode()     {}
func (*RunInstructionNode) InstructionNode()         {}
func (*ShellInstructionNode) InstructionNode()       {}
func (*StopsignalInstructionNode) InstructionNode()  {}
func (*UserInstructionNode) InstructionNode()        {}
func (*VolumeInstructionNode) InstructionNode()      {}
func (*WorkdirInstructionNode) InstructionNode()     {}

type StageNode struct {
	Node
	Identifier   string
	Subsequent   []*StageNode
	Instructions []*InstructionNode
	Image        string
}

// Generated by chatgpt because i ain't writing all that

// ADD
type AddInstructionNode struct {
	Source      []string
	Destination string
	KeepGitDir  bool
	CheckSum    string
	Chown       string
	Chmod       string
	Link        bool
	Exclude     string
}

// ARG
type ArgInstructionNode struct {
	Name  string
	Value string // optional default
}

// CMD
type CmdInstructionNode struct {
	Cmd []string
}

// COPY
type CopyInstructionNode struct {
	Source      string
	Destination string
	Chown       string
	From        string
	KeepGitDir  bool
	Link        bool
}

// ENTRYPOINT
type EntrypointInstructionNode struct {
	Exec []string
}

// ENV
type EnvInstructionNode struct {
	Pairs map[string]string
}

// EXPOSE
type ExposeInstructionNode struct {
	Port     string
	Protocol string // optional: "tcp" or "udp"
}

// FROM
type FromInstructionNode struct {
	Image    string
	Alias    string
	Platform string // optional
}

// HEALTHCHECK
type HealthcheckInstructionNode struct {
	Interval    string
	Timeout     string
	StartPeriod string
	Retries     int
	Cmd         []string // CMD or NONE
}

// LABEL
type LabelInstructionNode struct {
	Pairs map[string]string
}

// MAINTAINER (deprecated)
type MaintainerInstructionNode struct {
	Name string
}

// ONBUILD
type OnbuildInstructionNode struct {
	Trigger *InstructionNode
}

// RUN
type RunInstructionNode struct {
	Cmd       []string
	ShellForm bool // true if shell form, false if exec form
}

// SHELL
type ShellInstructionNode struct {
	Shell []string
}

// STOPSIGNAL
type StopsignalInstructionNode struct {
	Signal string
}

// USER
type UserInstructionNode struct {
	User string
}

// VOLUME
type VolumeInstructionNode struct {
	Mounts []string
}

// WORKDIR
type WorkdirInstructionNode struct {
	Path string
}
